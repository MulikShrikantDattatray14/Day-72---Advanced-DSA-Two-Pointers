Q4. Pairs with given sum II

Problem Description
Given a sorted array of integers (not necessarily distinct) A and an integer B, find and return how many pair of integers ( A[i], A[j] ) such that i != j have sum equal to B.

Since the number of such pairs can be very large, return number of such pairs modulo (109 + 7).



Problem Constraints
1 <= |A| <= 100000

1 <= A[i] <= 10^9

1 <= B <= 10^9



Input Format
The first argument given is the integer array A.

The second argument given is integer B.



Output Format
Return the number of pairs for which sum is equal to B modulo (10^9+7).



Example Input
Input 1:

A = [1, 1, 1]
B = 2
Input 2:

 
A = [1, 1]
B = 2


Example Output
Output 1:

 3
Output 2:

 1


Example Explanation
Explanation 1:

 Any two pairs sum up to 2.
Explanation 2:

 only pair (1, 2) sums up to 2.

CODE: 

module.exports = {
    //param A : array of integers
    //param B : integer
    //return an integer
    solve: function (A, B) {
        //1st way - best way (easy to understand )
        let N = A.length;
        let i = 0, j = N - 1;
        let mod = (Math.pow(10, 9)) + 7;
        let ans = 0;
        let sum = 0;
        while (i < j) {
            sum = (A[i] + A[j]) % mod;
            if (sum > B) {
                j--;
            } else if (sum < B) {
                i++;
            } else {// here sum==B;
                if (A[i] == A[j]) {//as it is already sorted.
                    let x = j - i + 1; //no other elements will be inbetween ith index and jth index.
                    ans += ((x * (x - 1)) / 2) % mod;
                    break;
                } else {
                    let a = 1, b = 1;
                    while (A[i] == A[i + 1]) { //counting dupliacte values on the left side 
                        a++;
                        i += 1;
                    }
                    i += 1;
                    while (A[j] == A[j - 1]) {////counting dupliacte values on the right side 
                        b++;
                        j -= 1;
                    }
                    j -= 1;
                    ans += (a * b) % mod;
                }
            }

        }
        return ans % mod;

        //2nd way - 
        // let mod = 1000 * 1000 * 1000 + 7;
        // let l = 0, r = A.length - 1, ans = 0;
        // while (l < r) {
        //     let sum = A[l] + A[r];
        //     if (sum == B) {
        //         let count = 0, prev = r;
        //         while (prev > l && A[r] == A[prev]) {//count duplicate values from right pointer
        //             count++;
        //             prev--;
        //         }
        //         ans = (ans + count) % mod;
        //         l++;
        //     } else if (sum < B) {
        //         l++;
        //     } else if (sum > B) {
        //         r--;
        //     }
        // }
        // return ans;

    }
};
